AWSTemplateFormatVersion: '2010-09-09'
Description: Cluster for housing the tasks that host the image uploader application

Parameters:
  ImageName:
    Description: The location of the image we are deploying to the task
    Type: String

Mappings:
  Accounts:
    "793632375881":
      VPCId: vpc-46a7882e
      SubnetAId: "subnet-0a4d443244dd2ccc3"
      SubnetBId: "subnet-09780baeb84c9e10b"
      SubnetCId: "subnet-0d4e875d7cf2de1bd"

Resources:
  ImageUploaderECSClusterKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: The key for encrypting comms between ECS cluster and containers
      Enabled: true
      KeyPolicy: !Sub |
          {
            "Version": "2012-10-17",
            "Id": "ecs-kms-key-policy",
            "Statement": [
              {
                "Sid": "Enable IAM User Permissions",
                "Effect": "Allow",
                "Principal": {
                  "AWS": "arn:aws:iam::${AWS::AccountId}:root"
                },
                "Action": "kms:*",
                "Resource": "*"
              }
            ]
          }
      MultiRegion: false
      PendingWindowInDays: 7

  ImageUploaderECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: image-uploader-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration: 
        ExecuteCommandConfiguration:
          KmsKeyId: !GetAtt ImageUploaderECSClusterKMSKey.Arn
          LogConfiguration:
            CloudWatchLogGroupName: image-uploader-task-log
            S3BucketName: floores-logs-bucket
            S3EncryptionEnabled: true
            S3KeyPrefix: image-uploader-ecs-cluster-logs
          Logging: OVERRIDE

  ImageUploaderECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: flooreus/image-uploader
      EmptyOnDelete: true

  ImageUploaderALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for Image Uploader load balancer"
      VpcId: 
        Fn::FindInMap:
          - Accounts
          - !Ref AWS::AccountId
          - VPCId

  ImageUploaderALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-alb
      Subnets: 
        - Fn::FindInMap:
          - Accounts
          - !Ref AWS::AccountId
          - SubnetAId
        - Fn::FindInMap:
          - Accounts
          - !Ref AWS::AccountId
          - SubnetBId
        - Fn::FindInMap:
          - Accounts
          - !Ref AWS::AccountId
          - SubnetCId
      SecurityGroups: 
        - !Ref ImageUploaderALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      
  ImageUploaderALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ImageUploaderTargetGroup
      LoadBalancerArn: !Ref ImageUploaderALB
      Port: 443
      Protocol: HTTP
      SslPolicy: ELBSecurityPolicy-2016-08
      
  ImageUploaderTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::FindInMap:
          - Accounts
          - !Ref AWS::AccountId
          - VPCId

  ImageUploaderTaskSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for Image Uploader ECS Task"
      VpcId: 
        Fn::FindInMap:
          - Accounts
          - !Ref AWS::AccountId
          - VPCId
      SecurityGroupIngress:
        - Description: Enable access from ALB to service
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ImageUploaderALBSecurityGroup

  ImageUploaderTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource: '*'

  ImageUploaderTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: image-uploader-ecs-task
      TaskRoleArn: !GetAtt ImageUploaderTaskExecutionRole.Arn
      ExecutionRoleArn: !GetAtt ImageUploaderTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: image-uploader-ecs-container
          Image: !Ref ImageName
          Memory: 512
          Cpu: 256
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: image-uploader-ecs-task-logs
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: image-uploader-ecs-task

  ImageUploaderECSALBService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: image-uploader-cluster
      ServiceName: image-uploader-ecs-service
      TaskDefinition: !Ref ImageUploaderTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::FindInMap:
              - Accounts
              - !Ref AWS::AccountId
              - SubnetAId
            - Fn::FindInMap:
              - Accounts
              - !Ref AWS::AccountId
              - SubnetBId
            - Fn::FindInMap:
              - Accounts
              - !Ref AWS::AccountId
              - SubnetCId
          SecurityGroups:
            - !Ref ImageUploaderTaskSecurityGroup
          AssignPublicIp: DISABLED
